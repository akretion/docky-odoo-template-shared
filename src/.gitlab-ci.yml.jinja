# MAJOR branches (14.0, 14, main, next)
# Minor branches: all the others

# major branches are protected (on gitlab)
# major branches are cached
# minor branches are derived from major branches
variables:
  # To have prefiled variables, go to Build > Pipeline > Run pipeline
  AK_TEMPLATE_DB:
    description: "DB to work with. _template or _previous_version_template. Only used in init_db job"
    value: ${CI_PROJECT_NAME}_template
  AK_DO_OPENUPGRADE_MIGRATION:
    description: "Do an openupgrade migration"
    options:
      - "true"
      - "false"
    value: "false"

workflow:
  # Remember: gitlab stop rule evaluation at first match
  rules:
    - if: $CI_COMMIT_TAG
      # don't run on git tag
      when: never
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true"'
      # we assume it's a merge request event
      # we don't handle merge request on a not protected branch
      # because we can't know from which cache we should start of 
      variables:
        AK_IS_MR: "true"
        AK_BASE_CACHE_DIR: ${CI_PROJECT_NAME}_preprod-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
        # target in working dir allow us to update cache
        # when source in mr (=target branch) is changed
        # ex: MR is created with source=14 (default) then changed to source=16 
        AK_WORKING_DIR: ${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}_${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        AK_IS_MAJOR_BRANCH: "true"
        AK_WORKING_DIR: ${CI_PROJECT_NAME}_preprod-${CI_COMMIT_BRANCH}

stages:
  - maintenance
  - build
  - refresh
  - migrate
#  - test
  - review
  - stop_review
  - review_preprod
  - deploy
  # - sentry

before_script:
  # TODO: manage mulitple preprod ?
  # ref-commit slug ?
  - echo $AK_WORKING_DIR
  - echo $AK_BASE_CACHE_DIR
  - echo $AK_IS_MR
  - echo $AK_IS_MAJOR_BRANCH
  - echo $CI_COMMIT_REF_PROTECTED
  - echo $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
  - export BUILD_NAME=${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID:-preprod-16-0}
  - export CI_DOMAIN=${CI_DOMAIN}
  - export DOMAIN=$BUILD_NAME.${CI_DOMAIN}


prebuild:
  # warmup caches once per MR
  stage: maintenance
  resource_group: semaphore
  script:
    # exit early if cache dir exists
    - test -d ~gitlab-runner/builds/${AK_WORKING_DIR} && exit 0
    # create a cache dir in ~gitlab-runner/builds/${AK_WORKING_DIR}
    - REMOTE=`realpath --relative-base="$HOME" .`
    - cd ~gitlab-runner/builds/
    - git clone ~/$REMOTE ${AK_WORKING_DIR}
    - cd ${AK_WORKING_DIR}

    # exit early if there is no cache to derive
    - test -d ~gitlab-runner/builds/${AK_BASE_CACHE_DIR} || exit 1 # Missing base dir

    # intialize caches (external-src, src, database and file store)
    - btrfs subvolume snapshot ~gitlab-runner/builds/${AK_BASE_CACHE_DIR}/odoo/src odoo/src
    - btrfs subvolume snapshot ~gitlab-runner/builds/${AK_BASE_CACHE_DIR}/odoo/external-src odoo/external-src
    - btrfs subvolume snapshot ~gitlab-runner/builds/${AK_BASE_CACHE_DIR}/.db .db

fetch:
  # run once per commit
  # checkout the expected commit
  resource_group: semaphore
  stage: maintenance
  script:
    - REMOTE=`realpath --relative-base="$HOME" .`
    - NEW_HEAD=`git rev-parse HEAD`
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    # || true if the remote already exists
    - git remote add --mirror=fetch $REMOTE ~/$REMOTE || true
    - git fetch --all
    - git checkout ${NEW_HEAD}
  needs: ["prebuild"]

build_openupgrade:
  stage: build
  script:
    # refactore with build !
    # ak build then docker build
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}

    - cp .env-ci .env
    # TODO use copier or something to inialize this env variables
    - echo BUILD_NAME=${BUILD_NAME} >> .env
    - echo CI_PROJECT_NAME=${CI_PROJECT_NAME} >> .env
    - echo "DOMAIN=${DOMAIN}" >> .env
    # uid , gid used by docker in postgres to fix perms on .db
    - echo "UID=`id -u`" >> .env
    - echo "GID=`id -g`" >> .env

    # ak build specific
    - cd odoo
    - cat spec.yaml spec-openupgrade.yaml > spec-migration.yaml
    - ak build -c spec-migration.yaml
    - cd ..

    # add the load variable to docker compose
    
    # manage secrets
    # run only if ci.secrets.docker-compose.yml exists
    - test -f ci.secrets.docker-compose.yml && sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml

    # temp sentry release for ci use only
    - docker compose build --build-arg SENTRY_RELEASE=$CI_COMMIT_SHORT_SHA
  rules:
    - if: $AK_DO_OPENUPGRADE_MIGRATION == "true"
  needs: ["fetch"]

build:
  stage: build
  script:
    # ak build then docker build
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}

    - cp .env-ci .env
    # TODO use copier or something to inialize this env variables
    - echo BUILD_NAME=${BUILD_NAME} >> .env
    - echo CI_PROJECT_NAME=${CI_PROJECT_NAME} >> .env
    - echo "DOMAIN=${DOMAIN}" >> .env
    # uid , gid used by docker in postgres to fix perms on .db
    - echo "UID=`id -u`" >> .env
    - echo "GID=`id -g`" >> .env
    
    
    # ak build
    - cd odoo && ak clone && ak sparse && ak build && cd ..
    
    # manage secrets
    # run only if ci.secrets.docker-compose.yml exists
    - test -f ci.secrets.docker-compose.yml && sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml

    # temp sentry release for ci use only
    - docker compose build --build-arg SENTRY_RELEASE=$CI_COMMIT_SHORT_SHA
  needs: ["fetch"]

# Run the database changes (click-odoo-update)
update_db:
  stage: migrate
  script:
    - echo ${BUILD_NAME}
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}

    - docker compose down --remove-orphans
    - docker compose run --rm odoo dropdb --if-exists ${CI_PROJECT_NAME} 
    # derive from template
    - docker compose run --rm odoo createdb ${CI_PROJECT_NAME} -T ${CI_PROJECT_NAME}_template

    # then click-odoo-update on it
    - $AK_DO_OPENUPGRADE_MIGRATION || docker compose run --rm odoo click-odoo-update
    - ($AK_DO_OPENUPGRADE_MIGRATION && docker compose run --rm odoo odoo --update all --load=base,web,openupgrade_framework --stop-after-init) || true

  rules:
    # if keepdb is set, this job will not run
    - if: $CI_MERGE_REQUEST_LABELS !~ /keepdb/
  needs: [ "build" ]

# test:
#   stage: test
#   script:
#     - CURRENT_PATH=`pwd`
#     - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
#     # get list of modules to test
#     # add back --select-exclude ${EXCLUDE_MODULES:-none} from a path

#     # TODO: réflechir si on laisse ça ici ou dans le conteneur
    
#     - ADDONS_TEST=$(manifestoo --select-addons-dir odoo/local-src list --separator=,)
#     - echo $ADDONS_TEST
#     - docker compose run --rm --workdir /data/odoo/filestore odoo coverage run --include "/odoo/local-src/*" --branch /odoo/bin/odoo --stop-after-init -i ${ADDONS_TEST} --test-enable --workers=0 && coverage xml --skip-empty 
#     # extract coverage report
#     - docker compose cp odoo /data/odoo/filestore/coverage.xml coverage.xml
#     # move coverage report to accessible location from gitlab-ci
#     - cp coverage.xml ${CURRENT_PATH}/coverage.xml
#   rules:
#     # Run tests in MR if there is no Skiptest tag
#     - if: $AK_IS_MR == "true" && $CI_MERGE_REQUEST_LABELS !~ /Skiptest/
#   needs: [ "update_db" ]
#   allow_failure: true
#   coverage: '/TOTAL(\W+\d+){5}\%/'
#   artifacts:
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage.xml

# # Initialize the database (by installing a module)
# init_db:
#   stage: migrate
#   script:
#     - export PGDATABASE=$BUILD_NAME
#     - echo "DB_NAME=$BUILD_NAME" >> .env
#     - docker compose kill
#     - docker compose run odoo odoo -i base --stop-after-init
#     # advice: Instead of base, install a module that contains your dependencies
#   rules:
#     # if emptydb tag is set (and no keepdb) this job will run
#     - if: $CI_MERGE_REQUEST_LABELS =~ /emptydb/ && $CI_MERGE_REQUEST_LABELS !~ /keepdb/

# Run the container used for the review
review:
  stage: review
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose up -d
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    url: https://${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}.${CI_DOMAIN}
    on_stop: stop_review
  needs:
    - job: "update_db"
      optional: true
    - job: "build"
      optional: true
  rules:
    - if: $AK_IS_MR == "true"

# Stop the container used for the review
stop_review:
  stage: review
  script:
    - CURRENT_PATH=`pwd` 
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose down --remove-orphans --volumes
    - cd $CURRENT_PATH
    - rm -rf ~gitlab-runner/builds/${AK_WORKING_DIR}
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    action: stop
  when: manual
  rules:
    - if: $AK_IS_MR == "true"

# # Start the preprod container
# There is no on_stop here
review_preprod:
  stage: review_preprod
  script:
    - echo "DB_NAME=$BUILD_NAME" >> .env
    - echo "DOMAIN=${CI_PROJECT_NAME}_preprod-${CI_COMMIT_REF_SLUG}.${CI_DOMAIN}" >> .env
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose up -d
  environment:
    name: preprod_${CI_COMMIT_BRANCH}
    url: https://${CI_PROJECT_NAME}_preprod-${CI_COMMIT_REF_SLUG}.${CI_DOMAIN}
  rules:
    - if: $AK_IS_MR == null
      # don't review preprod in branches
      # no when:never because
      # if there is 2 main branches, it's possible
      # than one exists
    - if: $AK_IS_MAJOR_BRANCH == "true"

prepare_release:
  stage: deploy
  script:
    # goal of this step is to compute the next version
    # here we stay in the gitlab runner's directory
    # Build tag but do not push on registry
    # push is done manually in publish
    # force fetch tags (especially in fetch startegy)
    - git fetch --tags
    # fetch latest tag from git
    # it's a bit tricky here, because some may have tagged
    # none or multiple time the same commit
    - LATEST_CANDIDATE=`git describe --abbrev=0 --tags`
    - echo $LATEST_CANDIDATE
    # if there is multiple tags on the same commit, keep the last one
    # sort -V gives 16.0.9 before 16.0.10
    # tail -n 1 gives the last line
    - LATEST_TAG=`git tag --points-at $LATEST_CANDIDATE | sort -V | tail -n 1`
    # current version is latest tag or commit branch name (ie 16.0)
    # for the moment branch name should follow semver
    # name like "master" or "next" are not supported
    - CURRENT_VERSION=${LATEST_TAG:-${CI_COMMIT_BRANCH}.0}
    # check validity of actual tag
    - pysemver check $CURRENT_VERSION
    # increment version number
    - VERSION=`pysemver bump patch $CURRENT_VERSION`
    - echo $VERSION
    - echo "VERSION=${VERSION}" >> variables.env
  rules:
    - if: $CI_COMMIT_TAG
      # NOT in response of tag creation
      # this job creates the tag
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      # NOT in merge request
      when: never
    - if: $AK_IS_MAJOR_BRANCH == "true"
      # run on protected branches only
  artifacts:
    reports:
      dotenv: variables.env

publish:
  # creates a gitlab release
  stage: deploy
  script:
    - CURRENT_PATH=`pwd`
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}/odoo
    - ak freeze
    # copy back in the initial dir the frozen.yaml
    # in order to be found by artifact.path
    - cp frozen.yaml $CURRENT_PATH/odoo
    - cd ..
    # rebuild with good version and the frozen in the image
    - docker compose build --build-arg SENTRY_RELEASE=$VERSION
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_$VERSION
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_latest

    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # deriviate tag latest from CI_COMMIT_SHA if you want to deploy the not latest tag
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_$VERSION
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_latest
  release:
    tag_name: '${VERSION}'
    description: 'release ${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}'
    ref: '${CI_COMMIT_SHA}'
  needs:
    - job: prepare_release
      artifacts: true
  artifacts:
    untracked: false
    expose_as: 'frozen'
    paths: ['odoo/frozen.yaml']
    when: on_success
  when: manual
  rules:
    # same rules as publish
    - if: $CI_COMMIT_TAG
      # NOT in response of tag creation
      # this job creates the tag
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      # NOT in merge request
      when: never
    - if: $AK_IS_MAJOR_BRANCH == "true"
      # run on protected branches only

generate_dump:
  # utile lors d'une migration de dumper la ci
  stage: maintenance
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}/
    - docker compose run --rm -T odoo pg_dump -d ${CI_PROJECT_NAME} > ${CI_PROJECT_NAME}-${CI_COMMIT_BRANCH}.dump
  when: manual

init_source_cache:
  stage: maintenance
  script:
    - rm -rf ~gitlab-runner/builds/${AK_WORKING_DIR}
    # create a cache dir in ~gitlab-runner/builds/${AK_WORKING_DIR}
    - REMOTE=`realpath --relative-base="$HOME" .`
    - cd ~gitlab-runner/builds/
    - git clone ~/$REMOTE ${AK_WORKING_DIR}
    - cd ${AK_WORKING_DIR}

    # create cache directory before use
    - btrfs subvolume create ~/builds/${AK_WORKING_DIR}/odoo/external-src
    - btrfs subvolume create ~/builds/${AK_WORKING_DIR}/odoo/src
    - btrfs subvolume create ~/builds/${AK_WORKING_DIR}/.db
    - btrfs subvolume create ~/builds/${AK_WORKING_DIR}/data
    - mkdir -p ~/builds/${AK_WORKING_DIR}/.db/data

    # build the project
    - cd odoo
    - ak clone && ak build
  when: manual
  rules:
    - if: $AK_IS_MAJOR_BRANCH == "true"

rmcache:
  stage: maintenance
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose down
    - cd ..
    - rm -rf ~gitlab-runner/builds/${AK_WORKING_DIR}
  when: manual
  rules:
    - if: $AK_IS_MR == "true"


refresh_db_template:
  # get db from remote server like pgci
  # and load into the pg in docker
  stage: maintenance
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}/
    # manage secrets (sops)
    # run only if ci.secrets.docker-compose.yml exists
    - test -f ci.secrets.docker-compose.yml && sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml

    
    # TODO: trouver un autre moyen de récuperer le dump ?
    # ex: chiffre avec sops le .pgpass
    - echo "Base db ${AK_TEMPLATE_DB}"
    - pg_dump -d ${AK_TEMPLATE_DB} > ${CI_PROJECT_NAME}.dump

    # now load the template
    # dropdb if possible
    - docker compose run --rm odoo dropdb --if-exists ${CI_PROJECT_NAME}_template
    # ensure db template exists
    - docker compose run --rm odoo createdb ${CI_PROJECT_NAME}_template
    # import dump
    - docker compose run --rm -T odoo psql -d ${CI_PROJECT_NAME}_template < ${CI_PROJECT_NAME}.dump
  when: manual
  rules:
    - if: $AK_IS_MAJOR_BRANCH == "true"


init_db_dump_in_major:
  stage: maintenance
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}/
    # ensure a dump is present in the directory
    - test -f ${CI_PROJECT_NAME}.dump

    - docker compose down --remove-orphans
    # force removal of .db/data if it exists
    - rm -rf .db/data
    - mkdir .db/data

    # use odoo container to access db because, it honors depends_on
    # (defined in docker compose), we just start from empty dir
    # so it takes time to boot
    # T is for TTY allocation

    # create empty db for tests
    - docker compose run --rm odoo createdb odoo

    # ensure db template exists
    - docker compose run --rm odoo createdb ${CI_PROJECT_NAME}_template
    # fill db template with data
    - docker compose run --rm -T odoo psql -d ${CI_PROJECT_NAME}_template < ${CI_PROJECT_NAME}.dump
    # CI_PROJECT_NAME may already exist because it's created
    # at postgres startup
    - docker compose run --rm -T odoo dropdb --if-exists ${CI_PROJECT_NAME}
    # derive db from template
    - docker compose run --rm -T odoo createdb ${CI_PROJECT_NAME} -T ${CI_PROJECT_NAME}_template
    - docker compose up -d # restart preprod
  when: manual
  rules:
    - if: $AK_IS_MAJOR_BRANCH == "true"

init_empty_db_in_major:
  stage: maintenance
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}/
    # fill db template with a empty db

    # or true because we may not running
    - docker compose stop odoo || true
    - docker compose run --rm odoo odoo -d ${CI_PROJECT_NAME}_template -i base --stop-after-init
    - docker compose up -d # restart preprod
  when: manual
  rules:
    - if: $AK_IS_MAJOR_BRANCH == "true"

refresh_db_in_branch:
  # kind of new keepdb ?
  # est-ce utile quand on a a migrate ?
  stage: maintenance
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}/
    - docker compose down --remove-orphans
    - rm -rf .db
    - btrfs subvolume snapshot ~gitlab-runner/builds/${AK_BASE_CACHE_DIR}/.db .db
  when: manual
  rules:
    - if: $AK_IS_MR == "true"

# # Start/Restart kwhtmltopdf
kwkhtmltopdf:
  stage: maintenance
  script:
    - docker compose -f kwkhtmltopdf-traefik.docker compose.yml down
    - docker compose -f kwkhtmltopdf-traefik.docker compose.yml up -d
  when: manual
  rules:
    # TODO: only on default branch
    # it's shared across all odoo major
    - if: $AK_IS_MAJOR_BRANCH == "true"
