# MAJOR branches (14.0, 14, main, next)
# Minor branches: all the others

# major branches are protected (on gitlab)
# major branches are cached
# minor branches are derived from major branches
variables:
  # To have prefiled variables, go to Build > Pipeline > Run pipeline
  AK_TEMPLATE_DB:
    description: "DB to work with. _template or _previous_version_template. Only used in init_db job"
    value: ${CI_PROJECT_NAME}_template
  AK_DO_OPENUPGRADE_MIGRATION:
    description: "Do an openupgrade migration"
    options:
      - "true"
      - "false"
    value: "false"

workflow:
  # Remember: gitlab stop rule evaluation at first match
  rules:
    - if: $CI_COMMIT_TAG
      # don't run on git tag
      when: never
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true"'
      # we assume it's a merge request event
      # we don't handle merge request on a not protected branch
      # because we can't know from which cache we should start of
      variables:
        AK_IS_MR: "true"
        AK_BASE_CACHE_DIR: ${CI_PROJECT_NAME}_preprod-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
        # target in working dir allow us to update cache
        # when source in mr (=target branch) is changed
        # ex: MR is created with source=14 (default) then changed to source=16
        AK_WORKING_DIR: ${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}_${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
    - if: $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        AK_IS_MAJOR_BRANCH: "true"
        AK_WORKING_DIR: ${CI_PROJECT_NAME}_preprod-${CI_COMMIT_BRANCH}

stages:
  - maintenance
  - build
  - refresh
  - migrate
  - review
  - stop_review
  - review_preprod
  - deploy
  # quality is at the end
  # because usually it's only
  # needed before the merge
  - test

before_script:
  # TODO: manage mulitple preprod ?
  # ref-commit slug ?
  - echo $AK_WORKING_DIR
  - echo $AK_BASE_CACHE_DIR
  - echo $AK_IS_MR
  - echo $AK_IS_MAJOR_BRANCH
  - echo $CI_COMMIT_REF_PROTECTED
  - echo $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
  - echo $CI_COMMIT_REF_SLUG
  - export BUILD_NAME=${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID:-preprod-${CI_COMMIT_REF_SLUG}}
  - export CI_DOMAIN=${CI_DOMAIN}
  - export DOMAIN=$BUILD_NAME.${CI_DOMAIN}

prebuild:
  # warmup caches once per MR
  stage: maintenance
  resource_group: semaphore
  script:
    # exit early if cache dir exists
    - test -d ~gitlab-runner/builds/${AK_WORKING_DIR} && exit 0
    # create a cache dir in ~gitlab-runner/builds/${AK_WORKING_DIR}
    - REMOTE=`realpath --relative-base="$HOME" .`
    - cd ~gitlab-runner/builds/
    - git clone ~/$REMOTE ${AK_WORKING_DIR}
    - cd ${AK_WORKING_DIR}

    # exit early if there is no cache to derive
    # usually, you may run the job "init_source_cache" from the major branch (16.0)
    # but, if you are switching from another template layout
    # this job may be not available because the actual 16.0 don't
    # contain this job. So you have to run it manually from the server
    - test -d ~gitlab-runner/builds/${AK_BASE_CACHE_DIR} || exit 1 # Missing base dir

    # intialize caches (external-src, src and file store)
    - btrfs subvolume snapshot ~gitlab-runner/builds/${AK_BASE_CACHE_DIR}/odoo/src odoo/src
    - btrfs subvolume snapshot ~gitlab-runner/builds/${AK_BASE_CACHE_DIR}/odoo/external-src odoo/external-src

pregetdb:
  # ensure spare are presents
  stage: maintenance
  script:
    # no need to wait for a build
    # can be run from anywhere
    # manage secrets
    # run only if ci.secrets.docker-compose.yml exists
    - test -f ci.secrets.docker-compose.yml && sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml

    # TODO: factorise this:
    - cp .env-ci .env
    # TODO use copier or something to inialize this env variables
    - echo BUILD_NAME=${BUILD_NAME} >> .env
    - echo CI_PROJECT_NAME=${CI_PROJECT_NAME} >> .env
    - echo "DOMAIN=${DOMAIN}" >> .env
    # uid , gid used by docker in postgres to fix perms on .db
    - echo "UID=`id -u`" >> .env
    - echo "GID=`id -g`" >> .env

    # create spare db, --detach allow the runner to continue
    # we don't need to build the project for that
    # -- profile allow us to run only this container
    # variables are passed through ci.docker-compose.yml
    - docker compose --profile db run --detach bedrock /odoo/create_spares.sh
    # always run
  rules:
    # but only on default target (one of the protected branches)
    # because at the moment, we don't want to create spares for migrations branches
    - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH # on default branch
    - if: $CI_DEFAULT_BRANCH == $CI_MERGE_REQUEST_TARGET_BRANCH_NAME # on PR targeting default branch

fetch:
  # run once per commit
  # checkout the expected commit
  resource_group: semaphore
  stage: maintenance
  script:
    - REMOTE=`realpath --relative-base="$HOME" .`
    - NEW_HEAD=`git rev-parse HEAD`
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    # || true if the remote already exists
    - git remote add --mirror=fetch $REMOTE ~/$REMOTE || true
    - git fetch --all
    - git checkout ${NEW_HEAD}
  needs: ["prebuild"]

build_openupgrade:
  stage: build
  script:
    # refactore with build !
    # ak build then docker build
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}

    - cp .env-ci .env
    # TODO use copier or something to inialize this env variables
    - echo BUILD_NAME=${BUILD_NAME} >> .env
    - echo CI_PROJECT_NAME=${CI_PROJECT_NAME} >> .env
    - echo "DOMAIN=${DOMAIN}" >> .env
    # uid , gid used by docker in postgres to fix perms on .db
    - echo "UID=`id -u`" >> .env
    - echo "GID=`id -g`" >> .env

    # ak build specific
    - cd odoo
    - cat spec.yaml spec-openupgrade.yaml > spec-migration.yaml
    - ak build -c spec-migration.yaml
    - cd ..

    # add the load variable to docker compose

    # manage secrets
    # run only if ci.secrets.docker-compose.yml exists
    - test -f ci.secrets.docker-compose.yml && sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml

    # temp sentry release for ci use only
    - docker compose build --build-arg SENTRY_RELEASE=$CI_COMMIT_SHORT_SHA
  rules:
    - if: $AK_DO_OPENUPGRADE_MIGRATION == "true"
  needs: ["fetch"]

build:
  stage: build
  script:
    # ak build then docker build
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}

    - cp .env-ci .env
    # TODO use copier or something to inialize this env variables
    - echo BUILD_NAME=${BUILD_NAME} >> .env
    - echo CI_PROJECT_NAME=${CI_PROJECT_NAME} >> .env
    - echo "DOMAIN=${DOMAIN}" >> .env
    # uid , gid used by docker in postgres to fix perms on .db
    - echo "UID=`id -u`" >> .env
    - echo "GID=`id -g`" >> .env

    # manage secrets
    # run only if ci.secrets.docker-compose.yml exists
    - test -f ci.secrets.docker-compose.yml && sops -d ci.secrets.docker-compose.yml > secrets.docker-compose.yml

    # ak build
    - cd odoo && ak clone && ak sparse && ak build && cd ..


    # temp sentry release for ci use only
    - docker compose build --build-arg SENTRY_RELEASE=$CI_COMMIT_SHORT_SHA
  needs: ["fetch"]

# Run the database changes (click-odoo-update)
update_db:
  stage: migrate
  script:
    - echo ${BUILD_NAME}
    - CURRENT_PATH=`pwd`
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}

    # first stop odoo to quit all db connexions
    - docker compose stop
    # drop db if needed
    - docker compose --profile db run bedrock dropdb --force --if-exists $BUILD_NAME
    - docker compose --profile db run bedrock odoo/get_db.sh

    # get list of modules before
    - psql -d ${BUILD_NAME} -c "select name, latest_version from ir_module_module order by name asc;" --csv -o modules_before.txt

    - $AK_DO_OPENUPGRADE_MIGRATION || docker compose run --rm odoo click-odoo-update
    - ($AK_DO_OPENUPGRADE_MIGRATION && docker compose run --rm odoo odoo --update all --load=base,web,openupgrade_framework --stop-after-init) || true

    # get list of modules after
    - psql -d ${BUILD_NAME} -c "select name, latest_version from ir_module_module order by name asc;" --csv -o modules_after.txt

    # --no-index allow us to compare two untracked files
    # here we just want a easy to read diff
    # no-index before output
    # || true because git diff return 1 if there is some changes
    - git diff --no-index --output modules_changed.diff --color -- modules_before.txt modules_after.txt || true
    - git diff --no-index --output modules_changed_nocolor.diff --no-color -- modules_before.txt modules_after.txt  || true
    - cat modules_changed.diff
    - cp modules_changed.diff $CURRENT_PATH/odoo
  rules:
    # if keepdb is set, this job will not run
    - if: $CI_MERGE_REQUEST_LABELS !~ /keepdb/
  needs: ["build"]
  artifacts:
    paths: ["odoo/modules_changed.diff"]

quality:
  stage: test
  script:
    # pre-commit may change files, so we don't want to run it from $AK_WORKING_DIR
    - cd odoo/local-src
    # but we want to use cache
    - export RUFF_CACHE_DIR=${AK_WORKING_DIR}
    # run pre-commit only on files in this directory
    # because it's config is tailored for odoo files
    - ruff check  --output-format=gitlab > ../../gl-code-quality-report.json || true
  artifacts:
#    paths: [gl-code-quality-report.json]
    reports:
      codequality: gl-code-quality-report.json
  # can be run sooner
  needs: ["fetch"]

lint:
  stage: test
  script:
    # pre-commit may change files, so we don't want to run it from $AK_WORKING_DIR
    - cd odoo/local-src
    # if no .pre-commit-config, don't run precommit
    - test -f .pre-commit-config.yaml || exit 0
    # but we want to use cache
    - export RUFF_CACHE_DIR=${AK_WORKING_DIR}
    # run pre-commit only on files in this directory
    # because it's config is tailored for odoo files
    - git ls-files -- . | xargs pre-commit run --files
  rules:
    # only in merge requests
    - if: $AK_IS_MR == "true"
  # can be run sooner
  needs: ["fetch"]


test:
  stage: test
  script:
    - CURRENT_PATH=`pwd`
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    # get list of modules to test
    # add back --select-exclude ${EXCLUDE_MODULES:-none} from a path
    # qu'est ce que ça fait ça ?
    #- docker compose run odoo initdb ${DB_NAME} --cache-prefix ${CI_PROJECT_NAME:0:7}
    # TODO: réflechir si on laisse ça ici ou dans le conteneur

    # list of all local-src modules
    - ADDONS_TEST=$(manifestoo --select-addons-dir odoo/local-src list --separator=,)
    - ADDONS_TEST_DEP=$(manifestoo --select-addons-dir odoo/local-src list-depends --separator=,)
    - echo $ADDONS_TEST
    - echo $ADDONS_TEST_DEP
    # start from a clean state
    - dropdb --force --if-exists ${BUILD_NAME}_test
    # --labels traefik.enable=false in order to not mess with the review
    # init db with dependencies of our modules
    - docker compose run --labels traefik.enable=false -e DB_NAME="${BUILD_NAME}_test" -e PGDATABASE="${BUILD_NAME}_test" --rm odoo click-odoo-initdb -n ${BUILD_NAME}_test -m ${ADDONS_TEST_DEP} --cache-prefix ${CI_PROJECT_NAME:0:7}
    # run the tests here
    - docker compose run --labels traefik.enable=false -e DB_NAME="${BUILD_NAME}_test" -e PGDATABASE="${BUILD_NAME}_test" --rm --workdir /data/odoo/filestore odoo coverage run --include "/odoo/local-src/*" --branch /odoo/bin/odoo --stop-after-init -i ${ADDONS_TEST} --test-enable --workers=0
    # display report in MR
    - docker compose run --labels traefik.enable=false -e DB_NAME="${BUILD_NAME}_test" -e PGDATABASE="${BUILD_NAME}_test" --rm --workdir /data/odoo/filestore odoo coverage report
    # export for the artifacts
    - docker compose run --labels traefik.enable=false -e DB_NAME="${BUILD_NAME}_test" -e PGDATABASE="${BUILD_NAME}_test" --rm --workdir /data/odoo/filestore odoo coverage xml --skip-empty
    # extract coverage report
    - docker compose cp odoo:/data/odoo/filestore/coverage.xml coverage.xml
    # move coverage report to accessible location from gitlab-ci
    - cp coverage.xml ${CURRENT_PATH}/coverage.xml
  rules:
    # Run tests in MR if there is no Skiptest tag
    - if: $AK_IS_MR == "true" && $CI_MERGE_REQUEST_LABELS !~ /Skiptest/
  needs:
      # update_db do a docker compose stop, we don't want to be halted
      # if this job start sooner
      # optional true, let us the ability to run if update_db is cancelled
    - job: "update_db"
      optional: true
  allow_failure: true
  coverage: '/TOTAL(\W+\d+){5}\%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# # Initialize the database (by installing a module)
# init_db:
#   stage: migrate
#   script:
#     - export PGDATABASE=$BUILD_NAME
#     - echo "DB_NAME=$BUILD_NAME" >> .env
#     - docker compose kill
#     - docker compose run odoo odoo -i base --stop-after-init
#     # advice: Instead of base, install a module that contains your dependencies
#   rules:
#     # if emptydb tag is set (and no keepdb) this job will run
#     - if: $CI_MERGE_REQUEST_LABELS =~ /emptydb/ && $CI_MERGE_REQUEST_LABELS !~ /keepdb/

# Run the container used for the review
review:
  stage: review
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose up -d
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    url: https://${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}.${CI_DOMAIN}
    on_stop: stop_review
  needs:
    - job: "update_db"
      optional: true
    - job: "build"
      optional: true
  rules:
    - if: $AK_IS_MR == "true"

# Stop the container used for the review
stop_review:
  stage: review
  script:
    - CURRENT_PATH=`pwd`
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose down --remove-orphans --volumes
    - cd $CURRENT_PATH
    - rm -rf ~gitlab-runner/builds/${AK_WORKING_DIR}
  environment:
    name: test/${CI_PROJECT_NAME}_${CI_MERGE_REQUEST_IID}
    action: stop
  when: manual
  rules:
    - if: $AK_IS_MR == "true"

# # Start the preprod container
# There is no on_stop here
review_preprod:
  stage: review_preprod
  script:
    - echo "DB_NAME=$BUILD_NAME" >> .env
    - echo "DOMAIN=${CI_PROJECT_NAME}_preprod-${CI_COMMIT_REF_SLUG}.${CI_DOMAIN}" >> .env
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose up -d
  environment:
    name: preprod_${CI_COMMIT_BRANCH}
    url: https://${CI_PROJECT_NAME}_preprod-${CI_COMMIT_REF_SLUG}.${CI_DOMAIN}
  rules:
    - if: $AK_IS_MR == null
      # don't review preprod in branches
      # no when:never because
      # if there is 2 main branches, it's possible
      # than one exists
    - if: $AK_IS_MAJOR_BRANCH == "true"
  needs:
    - job: "update_db"
      optional: true
    - job: "build"
      optional: true

prepare_release:
  stage: deploy
  script:
    # goal of this step is to compute the next version
    # here we stay in the gitlab runner's directory
    # Build tag but do not push on registry
    # push is done manually in publish
    - LAST_TAG=$(./bin/last_git_tag.sh ${CI_COMMIT_BRANCH}.0)
    # increment version number
    - VERSION=$(pysemver bump patch $LAST_TAG)
    - echo $VERSION
    - echo "VERSION=${VERSION}" >> variables.env

  rules:
    - if: $CI_COMMIT_TAG
      # NOT in response of tag creation
      # this job creates the tag
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      # NOT in merge request
      when: never
    - if: $AK_IS_MAJOR_BRANCH == "true"
      # run on protected branches only
  artifacts:
    reports:
      dotenv: variables.env
  needs:
    - build

publish:
  # creates a gitlab release
  stage: deploy
  script:
    - CURRENT_PATH=`pwd`
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}/odoo
    # touch: ak freeze to fail
    # for instance it may exists some issue with
    # reference to closed PR and stuff like that
    # here we output in CURRENT_PATH to not mess
    # the AK_WORKING_DIR with an untracked frozen
    - ak freeze -o $CURRENT_PATH/odoo/frozen.yaml || touch $CURRENT_PATH/odoo/frozen.yaml
    - cd ..

    # rebuild with good version and the frozen in the image
    - docker compose build --build-arg SENTRY_RELEASE=$VERSION
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_$VERSION
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
    - docker tag $BUILD_NAME $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_latest

    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # deriviate tag latest from CI_COMMIT_SHA if you want to deploy the not latest tag
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_$VERSION
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}
    - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_SLUG}_latest

    # ensure modules changed exist
    - touch modules_changed_nocolor.diff modules_changed.diff
    # todo: get this from artifact instead of local cache
    # display it
    - cat modules_changed.diff
    - mv modules_changed.diff $CURRENT_PATH/odoo/

    # generate a readme for the release
    # ensure file exist (generated in update_db)
    # if update_db is skiped this can provide wrong
    # results; colors are added by the markdown
    - touch modules_changed_nocolor.diff
    # mind the simples quotes
    - echo '# Release' > release.md
    - echo "" >> release.md
    - echo '```diff' >> release.md
    - cat modules_changed_nocolor.diff >> release.md
    - echo '```' >> release.md
    - cp release.md $CURRENT_PATH/release.md
  release:
    tag_name: "${VERSION}"
    description: "release.md"
    ref: "${CI_COMMIT_SHA}"
  needs:
    - job: prepare_release
      artifacts: true
  artifacts:
    untracked: false
    expose_as: "frozen"
    paths: ["odoo/frozen.yaml", "odoo/modules_changed.diff"]
    when: on_success
  when: manual
  rules:
    # same rules as publish
    - if: $CI_COMMIT_TAG
      # NOT in response of tag creation
      # this job creates the tag
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      # NOT in merge request
      when: never
    - if: $AK_IS_MAJOR_BRANCH == "true"
      # run on protected branches only


init_source_cache:
  stage: maintenance
  script:
    # this will create a cache dir for a major branch (16.0, 18.0)
    # and warm it up with ak build
    # btrfs allow us to have instant copy of files

    - rm -rf ~gitlab-runner/builds/${AK_WORKING_DIR}
    # at this point, we didn't change our directory yet
    # so we are in gitlab runner' managed directory, the
    # code is already checked out in '.'
    - REMOTE=`realpath --relative-base="$HOME" .`
    - cd ~gitlab-runner/builds/
    # create a cache dir in ~gitlab-runner/builds/${AK_WORKING_DIR}
    - git clone ~/$REMOTE ${AK_WORKING_DIR}
    - cd ${AK_WORKING_DIR}

    # create cache directory before use
    - btrfs subvolume create ~/builds/${AK_WORKING_DIR}/odoo/external-src
    - btrfs subvolume create ~/builds/${AK_WORKING_DIR}/odoo/src
    - btrfs subvolume create ~/builds/${AK_WORKING_DIR}/data

    # build the project
    - cd odoo
    - ak clone && ak build
  when: manual
  rules:
    - if: $AK_IS_MAJOR_BRANCH == "true"

rmcache:
  stage: maintenance
  script:
    - cd ~gitlab-runner/builds/${AK_WORKING_DIR}
    - docker compose down
    - cd ..
    - rm -rf ~gitlab-runner/builds/${AK_WORKING_DIR}
  when: manual
  rules:
    - if: $AK_IS_MR == "true"

# # Start/Restart kwhtmltopdf
kwkhtmltopdf:
  stage: maintenance
  script:
    - docker compose -f kwkhtmltopdf-traefik.docker-compose.yml down
    - docker compose -f kwkhtmltopdf-traefik.docker-compose.yml up -d
  when: manual
  rules:
    # TODO: only on default branch
    # it's shared across all odoo major
    - if: $AK_IS_MAJOR_BRANCH == "true"
